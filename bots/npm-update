#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

# To use this example add a line to an issue with the "bot" label
#
#  * [ ] npm-update angular
#

import collections
import json
import os
import sys
import subprocess

sys.dont_write_bytecode = True

import task

BOTS = os.path.abspath(os.path.dirname(__file__))
BASE = os.path.normpath(os.path.join(BOTS, ".."))

def package_json(data=None):
    package_path = os.path.join(BASE, "package.json")
    if data is None:
        with open(package_path, "r") as f:
            return json.load(f, object_pairs_hook=collections.OrderedDict)
    else:
        with open(package_path, "w") as f:
            json.dump(data, f, indent=2, separators=(',', ': '))
            f.write("\n")

def map_dict(dependencies, function):
    items = [ ]
    for (name, value) in dependencies.items():
        items.append((name, function(value)))
    return collections.OrderedDict(items)

def execute(*args):
    if task.verbose:
        sys.stderr.write("+ " + " ".join(args) + "\n")
    subprocess.check_call(args, cwd=BASE)

def run(package, verbose=False, **kwargs):
    # Force all current dependencies in place
    execute("npm", "install")

    data = package_json()

        packages = [ package ]
    else:
        packages = data["dependencies"].keys()

    # Add a tilde to all package.json dependencies
    data["dependencies"] = map_dict(data["dependencies"], lambda v: "~" + v)

    # Run npm upgrade for our package
    execute("npm", "upgrade", "--save", package)

    # Now remove all tildes or other version prefixes to lock dependency
    map_dependencies(package_path, lambda v: v.strip(" ^~=<>"))

    # Create a pull request from these changes
    branch = task.branch(package, "package.json: Update {0} dependency".format(package),
            pathspec="package.json", **kwargs)

    if branch:
        task.pull(branch, **kwargs)

if __name__ == '__main__':
    task.main(function=run, title="Upgrade a node dependency")
